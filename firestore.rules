rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection rules
    match /users/{userId} {
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }

    // Courses collection rules (merged)
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Modules collection
    match /modules/{moduleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Content collection
    match /content/{contentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User progress tracking
    match /user_progress/{progressId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Messages collection rules (new chat system)
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || resource.data.senderId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Keep existing chat rules during transition
    match /chats/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
      allow delete: if false;
    }

    // Notifications rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (isAdmin() || (resource.data.recipients.size() == 0 || resource.data.recipients.hasAny([request.auth.uid])));
      allow delete: if isAdmin();
    }

    // User tokens for FCM
    match /user_tokens/{tokenId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Typing status for chat
    match /typing_status/{userId} {
      allow read, write: if isAuthenticated();
    }

    // Content views for analytics
    match /contentViews/{viewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // Community Chat rules
    match /communityChat/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (isAdmin() || resource.data.senderId == request.auth.uid);
      allow delete: if false;
    }
  }
}