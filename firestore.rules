rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
match /users/{userId} {
  // Allow users to read and update their own data
  allow read, update: if request.auth != null && request.auth.uid == userId;
  // Allow admins to read all users
  allow read: if request.auth != null &&
    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
  // Only authenticated users can create their profile
  allow create: if request.auth != null && request.auth.uid == userId;
  // No delete allowed for user profiles (data retention)
  allow delete: if false;
}
    
    // Courses collection rules
    match /courses/{courseId} {
      // Anyone can read course data (public listing)
      allow read: if request.auth != null;
      // Only admins can create/update/delete courses
      allow write: if false; // Restrict to Admin SDK or server-side operations
    }
    
    // User-course assignments collection
match /courses/{courseId} {
  allow read: if request.auth != null;
  allow write: if request.auth != null &&
    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}
    
    // Modules collection
match /modules/{moduleId} {
  // Allow all authenticated users to read modules
  allow read: if request.auth != null;
  // Allow only admins to write (create, update, delete) modules
  allow write: if request.auth != null &&
    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}
    
    // Content collection
    match /content/{contentId} {
      // Users with module access can read content
      allow read: if request.auth != null;
      // Only admins can modify content
      allow write: if false; // Restrict to Admin SDK or server-side operations
    }
    
    // User progress tracking
    match /user_progress/{progressId} {
      // Users can read and write only their own progress data
      allow read, write: if request.auth != null && 
                          resource.data.userId == request.auth.uid;
    }
  }
} 